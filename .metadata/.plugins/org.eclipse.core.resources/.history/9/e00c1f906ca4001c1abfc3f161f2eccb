import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Stream;

public class Ex14_0 {

	public static void main(String[] args) {
//		Object obj -> (a, b) a > b ? a : b; // 람다식, 익명객체
//		Object obj = new Object() {
//			int max(int a, int b) {
//				return a > b ? a : b;
//			}
//		};
//
//		int value =  obj.max(3, 5); // 함수형 인터페이스 
	
//		MyFunction2 f = new MyFunction2() {
//			public int max(int a, int b) {
//				return a > b ? a:b;
//			}
//		};
		
		// 람다식(익명 객체)을 다루기 위한 참조변수의 타입은 함수형 인터페이스로 한다. 
//		MyFunction2 f = (a, b) -> a > b ? a : b; // 람다식, 익명객체 
//		
//		int value = f.max(3, 5);
//		System.out.println("value=" + value);
		
//		Function<String, Integer> f = (String s) -> Integer.parseInt(s);
//		Function<String, Integer> f = 클래스이름::메서드이름;
//		Function<String, Integer> f = Integer::parseInt; // 메서드 참
//		Function<String, Integer> f = Integer::parseInt;; // 메서드 참
//		Function<String, Integer> f = (String s) -> Integer.parseInt(s); // 메서드 참
//		System.out.println(f.apply("100")+200);
//		
////		 Supplier<MyClass> s = () -> new MyClass();
////		 Supplier<MyClass> s = MyClass::new;
//		 
////		 MyClass mc = s.get();
////		 System.out.println(mc);
////		 System.out.println(s.get());
//		 
//		 Function<Integer, MyClass> ff = (i) -> new MyClass(i);
////		 Function<Integer, MyClass> ff = MyClass::new;
//		 
////		 MyClass mc = s.get();
//		 MyClass mcf = ff.apply(100);
////		 System.out.println(mc);
////		 System.out.println(s.get());
//		 System.out.println(mcf);
//		 System.out.println(ff.apply(100).iv);
//		
////		 Function<Integer, int[]> f2 = (i) -> new int[i];
//		 Function<Integer, int[]> f2 = int[]::new; // 메서드 참조
//		int[] arr = f2.apply(200);
		
		
		 List<Integer> list = Arrays.asList(1,2,3,4,5);
		 Stream<Integer> intStream = list.stream(); // list Stream으로 변환
		 intStream.forEach(System.out::print);
		 
		 intStream = list.stream(); //list로부터 stream을 생성 
		 intStream.forEach(System.out::print);
		
	}
}

class MyClass {
	
	int iv;
	
	MyClass(int iv){
		this.iv = iv;
	}
	
};

//@FunctionalInterface //함수형 인터페이스는 단 하나의 추상 메서드만 가져야 함. 
//interface MyFunction2 {
//	public abstract int max(int a, int b);
////	public abstract int max2(int a, int b);
//}
